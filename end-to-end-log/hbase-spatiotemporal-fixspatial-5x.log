# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 1h)

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 22933.083 us/op
Iteration   1: 12997.033 us/op
Iteration   2: 12846.724 us/op
Iteration   3: 12810.344 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  12884.700 ±(99.9%) 1805.554 us/op [Average]
  (min, avg, max) = (12810.344, 12884.700, 12997.033), stdev = 98.969
  CI (99.9%): [11079.146, 14690.255] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 6h)

# Run progress: 25.00% complete, ETA 00:01:34
# Fork: 1 of 1
# Warmup Iteration   1: 66672.023 us/op
Iteration   1: 56130.464 us/op
Iteration   2: 56000.115 us/op
Iteration   3: 55934.452 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  56021.677 ±(99.9%) 1820.157 us/op [Average]
  (min, avg, max) = (55934.452, 56021.677, 56130.464), stdev = 99.769
  CI (99.9%): [54201.520, 57841.834] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 24h)

# Run progress: 50.00% complete, ETA 00:02:29
# Fork: 1 of 1
# Warmup Iteration   1: 208653.316 us/op
Iteration   1: 203072.612 us/op
Iteration   2: 204454.385 us/op
Iteration   3: 204423.857 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  203983.618 ±(99.9%) 14396.153 us/op [Average]
  (min, avg, max) = (203072.612, 203983.618, 204454.385), stdev = 789.102
  CI (99.9%): [189587.465, 218379.771] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 7d)

# Run progress: 75.00% complete, ETA 00:03:06
# Fork: 1 of 1
# Warmup Iteration   1: 1377514.911 us/op
Iteration   1: 1366006.055 us/op
Iteration   2: 1367274.579 us/op
Iteration   3: 1534688.571 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  1422656.402 ±(99.9%) 1770093.142 us/op [Average]
  (min, avg, max) = (1366006.055, 1422656.402, 1534688.571), stdev = 97024.778
  CI (99.9%): [≈ 0, 3192749.544] (assumes normal distribution)


# Run complete. Total time: 00:56:24

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (spatialWidth)  (timeLength)  Mode  Cnt        Score         Error  Units
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            1h  avgt    3    12884.700 ±    1805.554  us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            6h  avgt    3    56021.677 ±    1820.157  us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01           24h  avgt    3   203983.618 ±   14396.153  us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            7d  avgt    3  1422656.402 ± 1770093.142  us/op
