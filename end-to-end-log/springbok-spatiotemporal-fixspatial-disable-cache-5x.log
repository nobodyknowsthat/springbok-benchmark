# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 1h)

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 57731.093 us/op
Iteration   1: 22640.390 us/op
Iteration   2: 22078.316 us/op
Iteration   3: 21661.226 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  22126.644 ±(99.9%) 8964.373 us/op [Average]
  (min, avg, max) = (21661.226, 22126.644, 22640.390), stdev = 491.368
  CI (99.9%): [13162.271, 31091.017] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 6h)

# Run progress: 25.00% complete, ETA 00:03:07
# Fork: 1 of 1
# Warmup Iteration   1: 134230.372 us/op
Iteration   1: 51189.771 us/op
Iteration   2: 51056.400 us/op
Iteration   3: 50659.649 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  50968.606 ±(99.9%) 5030.702 us/op [Average]
  (min, avg, max) = (50659.649, 50968.606, 51189.771), stdev = 275.750
  CI (99.9%): [45937.905, 55999.308] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 24h)

# Run progress: 50.00% complete, ETA 00:03:26
# Fork: 1 of 1
# Warmup Iteration   1: 373006.919 us/op
Iteration   1: 139178.622 us/op
Iteration   2: 137671.034 us/op
Iteration   3: 137496.721 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  138115.459 ±(99.9%) 16872.559 us/op [Average]
  (min, avg, max) = (137496.721, 138115.459, 139178.622), stdev = 924.842
  CI (99.9%): [121242.900, 154988.018] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 7d)

# Run progress: 75.00% complete, ETA 00:03:20
# Fork: 1 of 1
# Warmup Iteration   1: 2420222.098 us/op
Iteration   1: 1975594.261 us/op
Iteration   2: 2802485.808 us/op
Iteration   3: 2915189.937 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  2564423.335 ±(99.9%) 9359853.224 us/op [Average]
  (min, avg, max) = (1975594.261, 2564423.335, 2915189.937), stdev = 513045.139
  CI (99.9%): [≈ 0, 11924276.559] (assumes normal distribution)


# Run complete. Total time: 01:34:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (spatialWidth)  (timeLength)  Mode  Cnt        Score         Error  Units
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01            1h  avgt    3    22126.644 ±    8964.373  us/op
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01            6h  avgt    3    50968.606 ±    5030.702  us/op
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01           24h  avgt    3   138115.459 ±   16872.559  us/op
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01            7d  avgt    3  2564423.335 ± 9359853.224  us/op
