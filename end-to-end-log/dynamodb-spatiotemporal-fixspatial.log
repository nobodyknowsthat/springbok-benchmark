# JMH version: 1.33
# VM version: JDK 1.8.0_312, OpenJDK 64-Bit Server VM, 25.312-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 1h)

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 37225.872 us/op
Iteration   1: 30663.320 us/op
Iteration   2: 30990.738 us/op
Iteration   3: 30083.896 us/op


Result "com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery":
  30579.318 ±(99.9%) 8377.879 us/op [Average]
  (min, avg, max) = (30083.896, 30579.318, 30990.738), stdev = 459.220
  CI (99.9%): [22201.439, 38957.197] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_312, OpenJDK 64-Bit Server VM, 25.312-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 6h)

# Run progress: 25.00% complete, ETA 00:03:15
# Fork: 1 of 1
# Warmup Iteration   1: 106715.965 us/op
Iteration   1: 97328.677 us/op
Iteration   2: 96737.803 us/op
Iteration   3: 96567.291 us/op


Result "com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery":
  96877.924 ±(99.9%) 7289.559 us/op [Average]
  (min, avg, max) = (96567.291, 96877.924, 97328.677), stdev = 399.565
  CI (99.9%): [89588.364, 104167.483] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_312, OpenJDK 64-Bit Server VM, 25.312-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 24h)

# Run progress: 50.00% complete, ETA 00:04:24
# Fork: 1 of 1
# Warmup Iteration   1: 320514.082 us/op
Iteration   1: 312877.877 us/op
Iteration   2: 308060.507 us/op
Iteration   3: 316985.638 us/op


Result "com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery":
  312641.341 ±(99.9%) 81499.532 us/op [Average]
  (min, avg, max) = (308060.507, 312641.341, 316985.638), stdev = 4467.264
  CI (99.9%): [231141.809, 394140.873] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_312, OpenJDK 64-Bit Server VM, 25.312-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 7d)

# Run progress: 75.00% complete, ETA 00:04:57
# Fork: 1 of 1
# Warmup Iteration   1: 2309123.223 us/op
Iteration   1: 2238892.358 us/op
Iteration   2: 2180013.639 us/op
Iteration   3: 2182234.931 us/op


Result "com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery":
  2200380.309 ±(99.9%) 608809.437 us/op [Average]
  (min, avg, max) = (2180013.639, 2200380.309, 2238892.358), stdev = 33370.900
  CI (99.9%): [1591570.873, 2809189.746] (assumes normal distribution)


# Run complete. Total time: 01:29:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (spatialWidth)  (timeLength)  Mode  Cnt        Score        Error  Units
DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery              01            1h  avgt    3    30579.318 ±   8377.879  us/op
DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery              01            6h  avgt    3    96877.924 ±   7289.559  us/op
DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery              01           24h  avgt    3   312641.341 ±  81499.532  us/op
DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery              01            7d  avgt    3  2200380.309 ± 608809.437  us/op
