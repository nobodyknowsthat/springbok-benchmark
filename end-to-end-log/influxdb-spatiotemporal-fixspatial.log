# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 1 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.InfluxdbSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 1h)

# Run progress: 0.00% complete, ETA 00:00:30
# Fork: 1 of 1
# Warmup Iteration   1: 254454.822 us/op
Iteration   1: 242042.265 us/op


Result "com.anonymous.test.benchmark.benchmark.InfluxdbSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  242042.265 us/op


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 1 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.InfluxdbSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 6h)

# Run progress: 33.33% complete, ETA 00:08:17
# Fork: 1 of 1
# Warmup Iteration   1: 1112453.777 us/op
Iteration   1: 1104147.178 us/op


Result "com.anonymous.test.benchmark.benchmark.InfluxdbSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  1104147.178 us/op


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 1 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.InfluxdbSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 7d)

# Run progress: 66.67% complete, ETA 00:11:18
# Fork: 1 of 1
# Warmup Iteration   1: 35223422.574 us/op
Iteration   1: 34917512.424 us/op


Result "com.anonymous.test.benchmark.benchmark.InfluxdbSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  34917512.424 us/op


# Run complete. Total time: 10:07:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       (spatialWidth)  (timeLength)  Mode  Cnt         Score   Error  Units
InfluxdbSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            1h  avgt         242042.265          us/op
InfluxdbSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            6h  avgt        1104147.178          us/op
InfluxdbSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            7d  avgt       34917512.424          us/op
