# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 1h)

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 7476.729 us/op
Iteration   1: 4851.010 us/op
Iteration   2: 4737.847 us/op
Iteration   3: 4752.558 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  4780.472 ±(99.9%) 1122.519 us/op [Average]
  (min, avg, max) = (4737.847, 4780.472, 4851.010), stdev = 61.529
  CI (99.9%): [3657.953, 5902.991] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 6h)

# Run progress: 25.00% complete, ETA 00:01:29
# Fork: 1 of 1
# Warmup Iteration   1: 17889.044 us/op
Iteration   1: 12793.432 us/op
Iteration   2: 12767.647 us/op
Iteration   3: 12756.734 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  12772.604 ±(99.9%) 343.794 us/op [Average]
  (min, avg, max) = (12756.734, 12772.604, 12793.432), stdev = 18.845
  CI (99.9%): [12428.810, 13116.398] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 24h)

# Run progress: 50.00% complete, ETA 00:00:58
# Fork: 1 of 1
# Warmup Iteration   1: 42567.548 us/op
Iteration   1: 36702.241 us/op
Iteration   2: 36632.365 us/op
Iteration   3: 36532.002 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  36622.203 ±(99.9%) 1561.171 us/op [Average]
  (min, avg, max) = (36532.002, 36622.203, 36702.241), stdev = 85.573
  CI (99.9%): [35061.031, 38183.374] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 7d)

# Run progress: 75.00% complete, ETA 00:00:45
# Fork: 1 of 1
# Warmup Iteration   1: 265569.177 us/op
Iteration   1: 263252.166 us/op
Iteration   2: 263162.491 us/op
Iteration   3: 262601.896 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  263005.518 ±(99.9%) 6429.281 us/op [Average]
  (min, avg, max) = (262601.896, 263005.518, 263252.166), stdev = 352.411
  CI (99.9%): [256576.236, 269434.799] (assumes normal distribution)


# Run complete. Total time: 00:11:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (spatialWidth)  (timeLength)  Mode  Cnt       Score      Error  Units
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            1h  avgt    3    4780.472 ± 1122.519  us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            6h  avgt    3   12772.604 ±  343.794  us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01           24h  avgt    3   36622.203 ± 1561.171  us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            7d  avgt    3  263005.518 ± 6429.281  us/op
