# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 1h)

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 22431.362 us/op
Iteration   1: 20354.905 us/op
Iteration   2: 18316.009 us/op
Iteration   3: 16725.391 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  18465.435 ±(99.9%) 33191.994 us/op [Average]
  (min, avg, max) = (16725.391, 18465.435, 20354.905), stdev = 1819.365
  CI (99.9%): [≈ 0, 51657.429] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 6h)

# Run progress: 25.00% complete, ETA 00:01:58
# Fork: 1 of 1
# Warmup Iteration   1: 29772.951 us/op
Iteration   1: 24944.108 us/op
Iteration   2: 24314.820 us/op
Iteration   3: 21057.933 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  23438.954 ±(99.9%) 38054.432 us/op [Average]
  (min, avg, max) = (21057.933, 23438.954, 24944.108), stdev = 2085.892
  CI (99.9%): [≈ 0, 61493.385] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 24h)

# Run progress: 50.00% complete, ETA 00:01:30
# Fork: 1 of 1
# Warmup Iteration   1: 64559.048 us/op
Iteration   1: 63906.014 us/op
Iteration   2: 62237.759 us/op
Iteration   3: 55281.210 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  60474.994 ±(99.9%) 83458.433 us/op [Average]
  (min, avg, max) = (55281.210, 60474.994, 63906.014), stdev = 4574.638
  CI (99.9%): [≈ 0, 143933.427] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 7d)

# Run progress: 75.00% complete, ETA 00:01:11
# Fork: 1 of 1
# Warmup Iteration   1: 533793.826 us/op
Iteration   1: 577513.958 us/op
Iteration   2: 576441.051 us/op
Iteration   3: 578160.611 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  577371.873 ±(99.9%) 15845.410 us/op [Average]
  (min, avg, max) = (576441.051, 577371.873, 578160.611), stdev = 868.540
  CI (99.9%): [561526.463, 593217.283] (assumes normal distribution)


# Run complete. Total time: 00:22:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (spatialWidth)  (timeLength)  Mode  Cnt       Score       Error  Units
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01            1h  avgt    3   18465.435 ± 33191.994  us/op
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01            6h  avgt    3   23438.954 ± 38054.432  us/op
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01           24h  avgt    3   60474.994 ± 83458.433  us/op
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01            7d  avgt    3  577371.873 ± 15845.410  us/op
