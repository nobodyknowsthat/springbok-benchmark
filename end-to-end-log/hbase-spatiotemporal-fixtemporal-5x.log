# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 001, timeLength = 24h)

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93448.718 us/op
Iteration   1: 72904.270 us/op
Iteration   2: 72921.735 us/op
Iteration   3: 73425.798 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  73083.935 ±(99.9%) 5403.632 us/op [Average]
  (min, avg, max) = (72904.270, 73083.935, 73425.798), stdev = 296.191
  CI (99.9%): [67680.302, 78487.567] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 24h)

# Run progress: 33.33% complete, ETA 00:05:14
# Fork: 1 of 1
# Warmup Iteration   1: 213721.907 us/op
Iteration   1: 196663.500 us/op
Iteration   2: 197320.542 us/op
Iteration   3: 196481.464 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  196821.835 ±(99.9%) 8052.394 us/op [Average]
  (min, avg, max) = (196481.464, 196821.835, 197320.542), stdev = 441.379
  CI (99.9%): [188769.441, 204874.229] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 1, timeLength = 24h)

# Run progress: 66.67% complete, ETA 00:04:40
# Fork: 1 of 1
# Warmup Iteration   1: 850659.968 us/op
Iteration   1: 852011.756 us/op
Iteration   2: 856877.968 us/op
Iteration   3: 870110.865 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  859666.863 ±(99.9%) 170876.483 us/op [Average]
  (min, avg, max) = (852011.756, 859666.863, 870110.865), stdev = 9366.317
  CI (99.9%): [688790.379, 1030543.346] (assumes normal distribution)


# Run complete. Total time: 00:37:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (spatialWidth)  (timeLength)  Mode  Cnt       Score        Error  Units
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery             001           24h  avgt    3   73083.935 ±   5403.632  us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01           24h  avgt    3  196821.835 ±   8052.394  us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery               1           24h  avgt    3  859666.863 ± 170876.483  us/op
