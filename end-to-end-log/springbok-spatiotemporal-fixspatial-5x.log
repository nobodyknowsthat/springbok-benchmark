# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 1h)

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 22227.856 us/op
Iteration   1: 19537.749 us/op
Iteration   2: 18556.412 us/op
Iteration   3: 17206.337 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  18433.499 ±(99.9%) 21355.291 us/op [Average]
  (min, avg, max) = (17206.337, 18433.499, 19537.749), stdev = 1170.556
  CI (99.9%): [≈ 0, 39788.790] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 6h)

# Run progress: 25.00% complete, ETA 00:01:57
# Fork: 1 of 1
# Warmup Iteration   1: 45903.077 us/op
Iteration   1: 39663.392 us/op
Iteration   2: 35638.168 us/op
Iteration   3: 32118.337 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  35806.633 ±(99.9%) 68876.396 us/op [Average]
  (min, avg, max) = (32118.337, 35806.633, 39663.392), stdev = 3775.348
  CI (99.9%): [≈ 0, 104683.029] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 24h)

# Run progress: 50.00% complete, ETA 00:01:56
# Fork: 1 of 1
# Warmup Iteration   1: 125019.775 us/op
Iteration   1: 107471.387 us/op
Iteration   2: 109604.497 us/op
Iteration   3: 117809.652 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  111628.512 ±(99.9%) 99578.658 us/op [Average]
  (min, avg, max) = (107471.387, 111628.512, 117809.652), stdev = 5458.242
  CI (99.9%): [12049.854, 211207.170] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 7d)

# Run progress: 75.00% complete, ETA 00:01:55
# Fork: 1 of 1
# Warmup Iteration   1: 2312958.308 us/op
Iteration   1: 2129129.701 us/op
Iteration   2: 2394813.727 us/op
Iteration   3: 2921919.360 us/op


Result "com.anonymous.test.benchmark.benchmark.SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery":
  2481954.263 ±(99.9%) 7361606.941 us/op [Average]
  (min, avg, max) = (2129129.701, 2481954.263, 2921919.360), stdev = 403514.517
  CI (99.9%): [≈ 0, 9843561.204] (assumes normal distribution)


# Run complete. Total time: 01:27:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (spatialWidth)  (timeLength)  Mode  Cnt        Score         Error  Units
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01            1h  avgt    3    18433.499 ±   21355.291  us/op
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01            6h  avgt    3    35806.633 ±   68876.396  us/op
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01           24h  avgt    3   111628.512 ±   99578.658  us/op
SpringbokSpatialTemporalBenchmark.spatialTemporalRangeQuery              01            7d  avgt    3  2481954.263 ± 7361606.941  us/op
