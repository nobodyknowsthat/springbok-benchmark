# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseIdTemporalQueryBenchmark.idTemporalQuery
# Parameters: (timeLength = 1h)

# Run progress: 0.00% complete, ETA 00:01:20
# Fork: 1 of 1
# Warmup Iteration   1: 5199.775 us/op
Iteration   1: 952.145 us/op
Iteration   2: 801.522 us/op
Iteration   3: 790.954 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseIdTemporalQueryBenchmark.idTemporalQuery":
  848.207 ±(99.9%) 1645.003 us/op [Average]
  (min, avg, max) = (790.954, 848.207, 952.145), stdev = 90.168
  CI (99.9%): [≈ 0, 2493.210] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseIdTemporalQueryBenchmark.idTemporalQuery
# Parameters: (timeLength = 6h)

# Run progress: 25.00% complete, ETA 00:01:05
# Fork: 1 of 1
# Warmup Iteration   1: 2070.273 us/op
Iteration   1: 1070.784 us/op
Iteration   2: 999.225 us/op
Iteration   3: 995.566 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseIdTemporalQueryBenchmark.idTemporalQuery":
  1021.858 ±(99.9%) 773.720 us/op [Average]
  (min, avg, max) = (995.566, 1021.858, 1070.784), stdev = 42.410
  CI (99.9%): [248.139, 1795.578] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseIdTemporalQueryBenchmark.idTemporalQuery
# Parameters: (timeLength = 24h)

# Run progress: 50.00% complete, ETA 00:00:44
# Fork: 1 of 1
# Warmup Iteration   1: 2758.479 us/op
Iteration   1: 1618.579 us/op
Iteration   2: 1519.027 us/op
Iteration   3: 1530.226 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseIdTemporalQueryBenchmark.idTemporalQuery":
  1555.944 ±(99.9%) 994.860 us/op [Average]
  (min, avg, max) = (1519.027, 1555.944, 1618.579), stdev = 54.532
  CI (99.9%): [561.084, 2550.804] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseIdTemporalQueryBenchmark.idTemporalQuery
# Parameters: (timeLength = 7d)

# Run progress: 75.00% complete, ETA 00:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 10470.136 us/op
Iteration   1: 5668.126 us/op
Iteration   2: 5499.970 us/op
Iteration   3: 5445.485 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseIdTemporalQueryBenchmark.idTemporalQuery":
  5537.860 ±(99.9%) 2117.301 us/op [Average]
  (min, avg, max) = (5445.485, 5537.860, 5668.126), stdev = 116.056
  CI (99.9%): [3420.560, 7655.161] (assumes normal distribution)


# Run complete. Total time: 00:01:29

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      (timeLength)  Mode  Cnt     Score      Error  Units
HBaseIdTemporalQueryBenchmark.idTemporalQuery            1h  avgt    3   848.207 ± 1645.003  us/op
HBaseIdTemporalQueryBenchmark.idTemporalQuery            6h  avgt    3  1021.858 ±  773.720  us/op
HBaseIdTemporalQueryBenchmark.idTemporalQuery           24h  avgt    3  1555.944 ±  994.860  us/op
HBaseIdTemporalQueryBenchmark.idTemporalQuery            7d  avgt    3  5537.860 ± 2117.301  us/op
