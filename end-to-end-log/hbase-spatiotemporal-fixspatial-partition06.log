# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 2 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 1h)

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18513.155 us/op
Iteration   1: 9704.750 us/op
Iteration   2: 9477.646 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  9591.198 us/op


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 2 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 6h)

# Run progress: 25.00% complete, ETA 00:01:27
# Fork: 1 of 1
# Warmup Iteration   1: 58092.061 us/op
Iteration   1: 48081.029 us/op
Iteration   2: 48198.401 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  48139.715 us/op


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 2 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 24h)

# Run progress: 50.00% complete, ETA 00:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 184126.849 us/op
Iteration   1: 178921.345 us/op
Iteration   2: 174393.612 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  176657.478 us/op


# JMH version: 1.33
# VM version: JDK 1.8.0_342, OpenJDK 64-Bit Server VM, 25.342-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 2 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 7d)

# Run progress: 75.00% complete, ETA 00:02:05
# Fork: 1 of 1
# Warmup Iteration   1: 1161594.373 us/op
Iteration   1: 1154400.456 us/op
Iteration   2: 1153541.845 us/op


Result "com.anonymous.test.benchmark.benchmark.HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery":
  1153971.151 us/op


# Run complete. Total time: 00:35:12

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    (spatialWidth)  (timeLength)  Mode  Cnt        Score   Error  Units
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            1h  avgt    2     9591.198          us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            6h  avgt    2    48139.715          us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01           24h  avgt    2   176657.478          us/op
HBaseSpatioTemporalQueryBenchmark.spatialTemporalRangeQuery              01            7d  avgt    2  1153971.151          us/op
