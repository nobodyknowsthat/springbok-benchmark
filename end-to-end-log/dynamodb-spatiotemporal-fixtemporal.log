# JMH version: 1.33
# VM version: JDK 1.8.0_312, OpenJDK 64-Bit Server VM, 25.312-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 001, timeLength = 24h)

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147962.011 us/op
Iteration   1: 133460.315 us/op
Iteration   2: 128739.469 us/op
Iteration   3: 127549.968 us/op


Result "com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery":
  129916.584 ±(99.9%) 57030.971 us/op [Average]
  (min, avg, max) = (127549.968, 129916.584, 133460.315), stdev = 3126.060
  CI (99.9%): [72885.613, 186947.555] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_312, OpenJDK 64-Bit Server VM, 25.312-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 01, timeLength = 24h)

# Run progress: 33.33% complete, ETA 00:08:58
# Fork: 1 of 1
# Warmup Iteration   1: 338999.088 us/op
Iteration   1: 322035.087 us/op
Iteration   2: 316454.230 us/op
Iteration   3: 311009.961 us/op


Result "com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery":
  316499.759 ±(99.9%) 100572.241 us/op [Average]
  (min, avg, max) = (311009.961, 316499.759, 322035.087), stdev = 5512.704
  CI (99.9%): [215927.518, 417072.000] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 1.8.0_312, OpenJDK 64-Bit Server VM, 25.312-b07
# VM invoker: /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java
# VM options: <none>
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 1 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery
# Parameters: (spatialWidth = 1, timeLength = 24h)

# Run progress: 66.67% complete, ETA 00:07:37
# Fork: 1 of 1
# Warmup Iteration   1: 1751731.397 us/op
Iteration   1: 1622564.332 us/op
Iteration   2: 1520806.416 us/op
Iteration   3: 1442003.232 us/op


Result "com.anonymous.test.benchmark.benchmark.DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery":
  1528457.994 ±(99.9%) 1651483.980 us/op [Average]
  (min, avg, max) = (1442003.232, 1528457.994, 1622564.332), stdev = 90523.410
  CI (99.9%): [≈ 0, 3179941.974] (assumes normal distribution)


# Run complete. Total time: 01:08:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        (spatialWidth)  (timeLength)  Mode  Cnt        Score         Error  Units
DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery             001           24h  avgt    3   129916.584 ±   57030.971  us/op
DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery              01           24h  avgt    3   316499.759 ±  100572.241  us/op
DynamodbSpatialTemporalQueryBenchmark.spatialTemporalRangeQuery               1           24h  avgt    3  1528457.994 ± 1651483.980  us/op
